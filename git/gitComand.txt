・Linuxコマンド
-a all すべて





・Gitコマンド
ステージへ追加
 git add .


・コミット
 git commit     　　  git config --global core.editor 'code --wait'で登録したエディターが立ち上がる。 コマンドパレットにshell
 git commit -m ''
 git commit -v　　　  変更内容も表示させる。

 
・変更されたファイルを確認
 git status


・変更差分を確認
 git diff            git addする前の変更分
 git diff --staged   git addした後の変更分


・変更履歴を確認する
 git log
 git log --onekine     一行で表示
 git log -p index.html ファイルの変更差分を確認。ファイルの中身を見れる。
 git log -n <コミット数> 表示するコミット数を制限する


・ファイルの削除を記録する
 git rm <ファイル名>           ワークツリーとリポジトリから削除
 git rm -r <ディレクトリ名>
 git rm --cached <ファイル名>　リポジトリのみ削除


・ファイルの移動
 git mv <旧ファイル> <新ファイル>  ファイルの移動、ファイルの変更を記録  ステージに追加した時にやる。ステージにも変更されている。
 ↓
 mv <旧ファイル> <新ファイル>
 git rm <旧ファイル>
 git add <新ファイル>
 この３つをやることと同じ。


・GitHubを新規追加
 git remote add origin <GitHubのurl>  originというショートカットでurlのリモートリポジトリを登録する.


・リモートリポジトリ(GitHub)へ送信する。
 Git push <リモート名> <ブランチ名>
 Git push origin master
 git push -u origin master     初回に-uをつけると、次回以降git pushのみでorigin masterにpushしてくれる。


・コマンドにエイリアスを付ける (コマンド入力を短縮して楽にする。 --globalでpc全体の設定になる)
 git config --global alias.ci commit
 git config --global alias.st status
 git config --global alias.br branch
 git config --global alias.co checkout 	


・.gitignore書き方
 index.html   # 指定したファイルを除外
 /root.html   # ルートディレクトリを指定
 dir/         # ディレクトリ以下を除外	
 /*/*.css     #	/以下の文字列にマッチ「＊」


・ファイルの変更を取り消す
 git checkout -- <ファイル名>
 git checkout -- <ディレクトリ名>
 git checkout --.             すべてを取り消す。"--"をつけてるのは、ブランチ名とファイル名が被った時に、どちらを指しているのかを
　　　　　　　　　　　　　　　　　　　Gitが分からなくなるのを避けるため。 


・ステージした変更を取り消す(addしたものを取り消す) (HEADは自分が今作業しているブランチ名)
　git reset HEAD <ファイル名>
　git reset HEAD <ディレクトリ名>
　git reset HEAD .               全変更を取り消す


・直前のコミットをやり直す
 git commit --amend           実行するとコミットエディタが表示される。　ファイルの中身も変えたかったら、ファイルを直してaddした後に実行する。
 

・リモートを表示する
 git remote        リモートを表示
 git remote -v     対応するURLを表示


・リモートリポジトリを新規追加
 git remote add <リモート名>


・リモートから情報を取得する(フェッチ) 取ってくるという意味
 git fetch <リモート名>
 git fetch origin


・リモートから情報を取得する(フル) リモートから情報を取得して、マージまで一度にやりたい時
 git pull <リモート名> <ブランチ名>
 git pull origin master(git pullでも可)
 ↓
 git fetch origin master
 git merge origin/master  
この二つをやるのと同じこと。


・リモートの詳細情報を表示する  git remoteコマンドより詳しい情報を表示する。		
 Git remote show <リモート名>
 Git remote show origin


・リモート名を変更、削除する 
 git remote rename <旧リモート名> <新リモート名>    変更する
 git remote rm <リモート名>　　　　　　　　　　　　　　削除する


・ブランチを新規作成
 git branch <ブランチ名>
 git branch feature
 git branch master origin/master             GitHubのmasterから、自分のmasterを作成できる。


・ブランチ一覧
 git branch
 git branch -a		


・ブランチを切り替える
 git checkout <既存ブランチ名>
 git checkout feature
 git checkout -b <新ブランチ名　>　　　ブランチを新規作成して切り替える


・変更履歴をマージする   作業中のブランチにマージする
 git merge <ブランチ名>
 git merge <リモート名/ブランチ名>
 git merge origin/master


・ブランチ名を変更、削除する
 git branch -m <ブランチ名>      ブランチ名を変更
 git branch -d <ブランチ名>      ブランチ削除
 git branch -D                 強制削除
 

・プルリクエストの流れ
変更をGitHubへプッシュ(自分が開発していたブランチで)したら、GitHubでプルリクエストを作る。作成したら、チームメンバーにコードレビューをお願いする。
レビューが通ったら、GitHubでマージボタンを押す。マージをしたら、それまで開発していたブランチを削除する。


・リベースで履歴を整えた形で変更を統合する (他のブランチのコミット履歴を自分に取り込めることが出来る。)(マージとリベースの違いは履歴が一直線なのか、枝分かれしてるかの違い。)
 git branch rebase <ブランチ名>


・プルのマージ型
 git pull <リモート名> <ブランチ名>
 git pull origin master


・プルのリベース型
 git pull --rebase <リモート名> <ブランチ名>
 git pull --rebase origin master


・複数のコミットをやり直す
 git rebase -i <コミットID>
 git rebase -i HEAD~3        (HEADは最新のコミット)
 ↓
 やり直したいcommitをeditにする
 ↓
 git commit --amend        やり直したら実行する
 git rebase --continue     次のコミットへ進む(リベース完了)


・コミットを並び替える、削除する
 git rebase -i HEAD~3      実行して、削除や並べ替えをする。


・コミットをまとめる
 git rebase -i HEAD~3        
 ↓
 pickをsquashにするとそのコミットを直前のコミットと一つにする。


・タグの一覧を表示
 git tag
 Git tag -l "201705"      パターンを指定してタグを表示


・タグを作成(注釈付きタグ)
 git tag -a [タグ名] -m "[メッセージ]"
 git tag -a 20170520_01 -m "version 20170520_01"


・タグを作成(軽量版タグ)
 git tag [タグ名]
 git tag 20170520_01


・タグをリモートリポジトリに送信する
 Git push [リモート名] [タグ名]
 Git push origin 20170520_01
 Git push origin --tags          タグを一斉に送信する


・作業を一次非難する
 git stash save       　　　　　　　saveは省略可
 git stash list       　　　　　　　非難した作業を確認する
 git stash apply      　　　　　　　最新の作業を復元する
 git stash apply --index  　　　　 ステージの状況も復元する
 git stash apply [スタッシュ名]     特定の作業を復元する
 git stash apply stash@{1}
 git stash drop                  最新の作業を削除する
 git stash drop [スタッシュ名]     特定の作業を削除する
 git stash apply stash@{1}
 git stash clear                 全作業を削除する




	





